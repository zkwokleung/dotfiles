# Change working directory to the top-most file manager window location
function cdf() { # short for `cdfinder`
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS: Use Finder via AppleScript
        cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux: Try to get current directory from various file managers
        if command -v nautilus &>/dev/null && pgrep -x nautilus >/dev/null; then
            # GNOME Nautilus - fallback to home directory
            echo "Linux file manager integration not available. Use 'cd' directly."
            return 1
        elif command -v dolphin &>/dev/null && pgrep -x dolphin >/dev/null; then
            # KDE Dolphin - fallback to home directory
            echo "Linux file manager integration not available. Use 'cd' directly."
            return 1
        else
            echo "No supported file manager found. Use 'cd' directly."
            return 1
        fi
    else
        echo "Unsupported platform: $OSTYPE"
        return 1
    fi
}

# Change working directory and list contents
function cdls() { cd "$@" && ls; }

# Open current working directory in file manager or optionally open the given location
function o() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS: Use the 'open' command
        if [ $# -eq 0 ]; then
            open .
        else
            open "$@"
        fi
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux: Use xdg-open (universal opener)
        if [ $# -eq 0 ]; then
            xdg-open . 2>/dev/null || {
                echo "xdg-open not available. Please install xdg-utils or use your file manager directly."
                return 1
            }
        else
            xdg-open "$@" 2>/dev/null || {
                echo "xdg-open not available. Please install xdg-utils."
                return 1
            }
        fi
    else
        echo "Unsupported platform: $OSTYPE"
        return 1
    fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
# ? Sources: https://github.com/mathiasbynens/dotfiles
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

function :q() {
    for i in {30..37}; do
        # Display hello message
        echo -e "\e[00;${i}mYOU ARE NOT USING VIM!!!!!!!!\e[00m"
    done
}

# Conda
function conact() {
    conda activate $1
    conda env list
}

function condeact() {
    conda deactivate
    conda env list
}

function conin() {
    conda info --envs
}

function current-whether() {
    while true;
    do
        clear
        curl -s wttr.in | head -7
        echo "\n"
        echo "Last Updated: $(date)"
        sleep 1800
    done
}

function future-whether() {
    while true;
    do
        clear
        curl -s wttr.in | head -27 | tail -20
        echo "\n"
        echo "Last Updated: $(date)"
        sleep 3000
    done
}

function moon-phase() {
    while true;
    do
        clear
        curl wttr.in/moon | head -24
        sleep 3600
    done
}

function quote-display() {
    while true;
    do
        clear
        TEXT=$(curl https://zenquotes.io/api/random -s | jq -r '.[0].q')
        COLUMNS=$(tput cols)
        ROWS=$(tput lines)
        CENTERROW=$(($ROWS/2))

        for _ in $(seq 2 $CENTERROW); do
            printf "\n"
        done

        printf "%*s\n" $(((${#TEXT}+$COLUMNS)/2)) "$TEXT"
        sleep 1500
    done
}

function loading() {
    printf "%s\n" "Loading Brain Cells. . ."

    MAX=100

    while true; do
        for i in $(seq 0 $MAX); do
            printf  "%s" "["
            for _ in $(seq 0 "$i"); do
                printf "%s" "â–ˆ"
            done
            for _ in $(seq 0 $(($MAX-$i))); do
                printf " "
            done
            printf "%s" "]"
            sleep $(awk -v n=10 -v seed="$RANDOM" 'BEGIN { srand(seed); printf("%.4f\n", rand()%.7f) }')
            printf "\r"
        done
        curl "http://www.randomnumberapi.com/api/v1.0/randomstring?min=$MAX"
        sleep 1
    done
}

function ovpn() {
    if [ $# -eq 0 ]; then
        echo "Usage: ovpn <country_code>"
        echo "Example: ovpn us, ovpn sg"
        return 1
    fi

    local country_code="$1"
    local ovpn_dir="$HOME/OpenVPN"

    if [ ! -d "$ovpn_dir" ]; then
        echo "Error: Directory $ovpn_dir does not exist"
        return 1
    fi

    local ovpn_file=$(find "$ovpn_dir" -name "${country_code}*.ovpn" | head -1)

    if [ -z "$ovpn_file" ]; then
        echo "Error: No .ovpn file found starting with '$country_code' in $ovpn_dir"
        return 1
    fi

    echo "Connecting to VPN using: $(basename "$ovpn_file")"
    cd "$ovpn_dir" && sudo openvpn "$ovpn_file"
}

# Claude Code functions
function cl() {
    if [ $# -eq 0 ]; then
        claude
    else
        local config_name="$1"
        echo "Running Claude Code in $1 environment. . ."
        export CLAUDE_CONFIG_DIR="~/.claude-${config_name}"
        claude
        unset CLAUDE_CONFIG_DIR
    fi
}
